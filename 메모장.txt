http://10.154.26.150:6262/KM/

할일
1. 주제 선정	예) 쇼핑몰
2. 기능정의서	
예) 로그인-id랑 password확인->DB확인, 
회원가입, 리뷰작성, 상품조회, 상품상세보기, 장바구니, 상품결제 등
3. 화면설계
4. ERD/DB설계
5. 



레퍼런스 문서 활용하기***
이유 간결하고 중요한 정보가 들어있기 때문에 읽어볼 필요성이 있음

특징
DI - 의존성 주입 - 객제간의 의존 관계를 설정하여 개발자가 직접 의존하는 객체를 생성할 필요 없음
Spring AOP - 관점 지향 프로그래밍 - 여러 계층에서 공통으로 필요로 하는 기능의 경우 해당 기능들을 분리하여 관리
POJO - 일반적인 클레스가 pojo임
IoC - 제어 반전 - 컨트롤의 주도권이 프레임워크에 있음, 객체 생성, 모든생명주기 관리까지 프레임워크가 주도, 객체를 생성하고 직접 호출하는 프로그램이 아니라 만들어둔 자원을 호출하여 사용


xml파일 - tomcat에 대한 설정
xml - 배포 서술자 



bean = 콩ㅋ

스프링은 알아서 run함(IoC)

배고파잉..진짜 배고파잉.....맘스터치 치즈볼이랑 엽떡 먹고 싶다....앜 진짜 맛있겠다아아앙
맘스터치 치즈볼 진짜 먹고싶다아아아아아아앙아


POJO를 빈으로 등록하는 방법
1) xml파일에서 등록하는 방법
2) 어노테이션으로 등록하는 방법 *@Controller* <- 이거
3) 이건 나중에 알려주신다고 하셨다.


MVC
Controller는 요청을 URL로 받는 역할


	클라이언트가 보낸 데이터는 매핑메소드의 매개변수를 선언해서 처리함 
	1. HttpServletRequest : 요청정보를 저장하고 있는 객체
	2. HttpServletReseponse : 응답정보를 저장하고 있는 객체 -> 응답처리
	3. HttpSession : Session정보를 저장하는 객체(로그인처리할때)
	4. java.util.Locale : 서버의 로케일정보를 저장하는 객체 -> 지역에 대한 정보 ko_KR
	5. InputStream/Reader : 데이터를 서버로 읽어오는 객체 -> read()
	6. OutputStream/Writer : 데이터를 섯버에서 클라이트에 보내는 객체 -> write()
	7. 기본자료형 변수(int, String, double...) : 클라이언트가 보낸 데이터 name과 일치하게 선언하면 자동으로 저장시켜줌 
	8. VO클래스타입 : 클라이언트가 보낸 다수의 데이터를 자정하는 객체 -> 필드명하고 name값이 일치할때 자동으로 저장시켜줌
	** Date, 다른 클래스들...spring처리하지 못하는 것은 403 BadRequest에러를 발생!!
	9. java.util.Map : 클라이언트가 보낸 데이터를 key:value형식으로 데이터를 저장해시켜줌
	** 주의! 단일값으로 저장 -> 복수값은 해결이 안됨!! (체크박스라던가..뭐...그런건 안됨)
	매개변수앞에 사용하는 어노테이션
	@RequestParam : 클라이언트가 보낸 데이터를 저장할때 추가 옵션설정할 수 있는 어노테이션
	@RequestBody : 클라이언트가 보낸 데이터가 JSON방식일때 자바클래스로 변경해서 저장해주는 어노테이션
	@SessionAttribute : HttpSession에 저장된 특정값을 가져올때 사용하는 어노테이션 
	@ModelAttribute : Model객체에 데이터를 저장할때 사용하는 어노테이션  
	@CookieValue : Cookie에 저장된 특정값을 가져올때 사용하는 어노테이션
	@RequestHeader : RequestHeader에 특정 헤더값을 가져올때 사용하는 어노테이션











